package ai.agentic.newslettergen.editor;

import static ai.agentic.newslettergen.commons.Constants.AGENT_NEWSLETTER_MODEL;
import static ai.agentic.newslettergen.commons.Constants.AZURE_AI_FOUNDRY_ENDPOINT;
import static ai.agentic.newslettergen.commons.Constants.AZURE_AI_FOUNDRY_KEY;
import static ai.agentic.newslettergen.commons.Constants.IS_LOGGING_ENABLED;
import dev.langchain4j.agentic.Agent;
import dev.langchain4j.agentic.declarative.ChatModelSupplier;
import dev.langchain4j.model.chat.ChatModel;
import dev.langchain4j.model.openai.OpenAiChatModel;
import dev.langchain4j.service.UserMessage;
import dev.langchain4j.service.V;

public interface NewsletterEditor {

    //        STATISTICS SECTION:
//        {{statisticsContent}}
//        
//        RELEASES SECTION:
//        {{releasesContent}}
//        
//        REFERENCES SECTION:
//        {{referencesContent}}
    @UserMessage("""
        The current date is {{current_date}}
        
        You are a professional newsletter editor specializing in technology publications. Your role is to compile, edit, and format a comprehensive newsletter about LangChain4j by integrating content from multiple specialized agents.
        
        Your responsibilities:
        - Combine content from Statistics, Releases, References, and Code Sample agents into a cohesive newsletter
        - Edit and refine all sections for clarity, flow, and consistency
        - Remove any duplicate information across sections
        - Ensure proper chronological and logical ordering of content
        - Maintain a professional yet accessible tone throughout
        - Format the output as clean, well-structured Markdown
        - Add smooth transitions between sections
        - Include a compelling introduction and conclusion
        
        Newsletter structure guidelines:
        1. Header with title and subtitle
        2. Introduction explaining what LangChain4j is
        3. Statistics section with key metrics and numbers
        4. What's New section covering recent developments
        5. Release Pace section with version history
        6. Model Provider Support sections (Azure, AWS, Google, etc.)
        7. Some Code section with practical examples
        8. References section with helpful links
        
        Editorial standards:
        - Ensure factual accuracy and consistency across sections
        - Use active voice and clear, concise language
        - Maintain consistent formatting and style
        - Remove redundant information while preserving important details
        - Add context and explanations where needed for clarity
        - Ensure code examples are properly formatted with syntax highlighting
        - Keep the newsletter engaging and informative for Java developers
        
        Compile and edit the LangChain4j {{version}} newsletter using the following content sections generated by specialized agents:
        
            CODE SAMPLE SECTION:
            {{codeSampleSection}}
        
            Your tasks:
            1. Create a cohesive newsletter by integrating all sections in the proper order
            2. Edit each section for clarity, grammar, and consistency
            3. Remove any duplicate information between sections
            4. Add smooth transitions and connecting text between sections
            5. Ensure the newsletter follows the established format (title, introduction, statistics, releases, code, references)
            6. Format everything as clean Markdown with proper headers, lists, and code blocks
            7. Add a compelling introduction that explains what LangChain4j is and why readers should care
            8. Include the current month/year in the newsletter title
            9. Ensure all links are properly formatted and functional
            10. Review for overall flow and readability
        
            Generate the complete newsletter in Markdown format, ready for distribution.
        """)
    @Agent(outputName = "newsletter", description = "Compiles, edits, and formats the complete monthly newsletter by integrating content from all specialized agents, ensuring consistency, removing duplications, and producing a polished Markdown publication ready for distribution")
    String editAndCompileNewsletter(
//        @V("statisticsSection") String statisticsSection,
//        @V("releaseSection") String releaseSection,
//        @V("referenceSection") String referenceSection,
        @V("codeSampleSection") String codeSampleSection,
        @V("fromLangchain4jVersion") String fromLangchain4jVersion,
        @V("toLangchain4jVersion") String toLangchain4jVersion
    );

    @ChatModelSupplier
    static ChatModel newsletterEditorModel() {
        return OpenAiChatModel.builder()
            .apiKey(AZURE_AI_FOUNDRY_KEY)
            .baseUrl(AZURE_AI_FOUNDRY_ENDPOINT)
            .modelName(AGENT_NEWSLETTER_MODEL)
            .temperature(0.3)
            .logRequests(IS_LOGGING_ENABLED)
            .logResponses(IS_LOGGING_ENABLED)
            .build();
    }
}
